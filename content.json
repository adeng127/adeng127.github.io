{"meta":{"title":"Xraytf","subtitle":"","description":"希望明天，也是好天气。","author":"阿灯","url":"http://example.com","root":"/"},"pages":[{"title":"所有分类","date":"2022-10-11T14:44:01.411Z","updated":"2022-10-11T14:44:01.411Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-10-29T09:36:39.010Z","updated":"2022-10-29T09:36:39.010Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"纯大学生一枚，纯凭兴趣制作博客，玩github ︿(￣︶￣)︿ 本博客绑定github，基于hexo建成。 制作本身涉及：域名创建解析，nodejs，git，hexo，web 喜欢的可以关注我的github查看代码 网站：【github】https://github.com/adeng127/adeng127.github.io 其他： 【bilibili】 https://space.bilibili.com/687466612?spm_id_from=333.1007.0.0 # 记录我有一些剪的视频在里面，觉得有喜欢的可以看看（三连也是可以滴 ♪(^∇^*)） 【邮箱】：&#49;&#50;&#x37;&#54;&#53;&#x37;&#54;&#x31;&#x35;&#x36;&#x40;&#113;&#x71;&#x2e;&#99;&#111;&#109; 【qq】：1276576156"},{"title":"所有标签","date":"2022-10-11T14:44:00.577Z","updated":"2022-10-11T14:44:00.577Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"我的博客友人","date":"2022-10-12T09:30:35.988Z","updated":"2022-10-12T09:30:35.988Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"在此感谢每一个友人，相遇即是有缘，嘻嘻）","text":"在此感谢每一个友人，相遇即是有缘，嘻嘻） 如果你看到这里，也是一位博主，想交个朋友，或者和我一样是个小白，希望互相学习，共同进步 不妨在下面留个言，放上自己的博客。 相逢即是朋友，嘿嘿~"},{"title":"Hi! I'm Xraytf!","date":"2022-10-30T03:41:03.587Z","updated":"2022-10-30T03:41:03.587Z","comments":true,"path":"footprint/index.html","permalink":"http://example.com/footprint/index.html","excerpt":"","text":"欢迎来到我的足迹~ 本人： 大二在读，一位想要流浪的中二少年~ 我的脚步博客建成12345&gt; 博客知识总结：域名，nodejs，git，github，hexo，web ——————————（当然学会还不至于，只是在浪，以后，可能，也会用上） 在这里重点感谢千千，还有其他帮我解答，甚至联机帮我做的大佬，谢谢谢谢谢谢谢谢....！（鞠躬） 博客修缮12345&gt; 通过千千开始接触volantis主题，并启用。 在此感谢B站，Mrhuanhao大佬，我通过他的volantis教程一步步完善初始博客，真的太棒了！ 如果你也做博客，看到我的，喜欢这个主题，也可以去看看 主题在这~：——————volantis"}],"posts":[{"title":"git入门","slug":"git入门","date":"2022-11-05T16:00:00.000Z","updated":"2022-11-07T04:18:48.165Z","comments":true,"path":"2022/11/06/git入门/","link":"","permalink":"http://example.com/2022/11/06/git%E5%85%A5%E9%97%A8/","excerpt":"git入门的相关操作，也就是一些基础指令","text":"git入门的相关操作，也就是一些基础指令 我了解到的git操作相关笔记，记录学习。 git基础功能 作用 —— 最主要的作用是保存代码到本地仓库，以备不时之需，相当于是买了后悔药 比如你写了一串代码，用户让你修改，然后改了几次又想要原来的，就可以进行类似回档的效果。 —— 其他的功能还有比如提交到github，hexo博客制作等。 git安装及打开使用 —— 去官网downlode自己下去，然后去桌面右击再点击第二个：git bush Here（通过命令行打开git） —— 觉得页面不好看自己换，右击框可以options设置，自己看看吧。 —— 还有一个功能先做了，配置用户名和邮箱。 12$ git config --global user.name &quot;Your Name&quot; $ git config --global user.email &quot;email@example.com&quot; 就这个样子 git基础语言git clone: ———–如果你想白嫖github上别人的一些源码（开源项目）就可以在你想存的地方比如桌面 右击打开 输入git clone 再去github右边的code复制其链接添加到右面格式： 1git clone 链接 —— 弄好之后就可以看到桌面有个文件夹，.git不用你管，那个是版本管理的文件。其他的就是源码了 git init: ———–让git管理自己的代码库。需要进行初始化。首先需要创建新文件夹，然后输入git init完成操作。 格式： 1git init —— 这样就出现了.git文件夹，也就可以进行代码管理。 ———–接下来你就可以创建文件撸代码了~ 提交操作——-提交是两步操作，比如我把饭做好了放在架子上（add），然后机器在交上去（commit） git add —— 如果你想把当前文件夹全部提交，就用： 1git add . —— 那个点是全部文件和非空文件夹的意思，不是我写作了哈~ 不过这里也不是提交,而是进入暂存区。—— 如果你想一个个提交，用下面的代码： 1git add 文件名 —— 这样就把你想提交的那个文件加入了暂存区。也就是放在架子上等着用机器去送货，你再用就再放上去了一个。 git commit —— 将暂存区的文件全部提交的操作格式： 1git commit -m &quot;备注&quot; —— 这个备注最好要养成习惯，不要觉得不在意就瞎写，在进步的过程中，良好的习惯很重要，好好写以后会方便很多。 这些命令就是提交到本地仓库，便于管理。—–仓库在哪？.git文件夹。 git log —— 查看提交记录，可以自己去试试看能出现什么格式： 1git log —— 里面会有 commit （一大串字母数字）后面的就相当于编号，唯一标识。 git checkout —— 如果有人随便修改了你的代码并保存了，你就可以利用这个进行回档格式： 1git checkout HEAD 文件名 —— 他的作用是恢复成最后一次提交的状态。但是会覆盖，要小心。—— 所以在你把代码改的很乱结果跑不起来了，就可以利用这个命令，恢复成以前能跑的代码。 至此，大致的入门基本结束了，基础的写代码，提交，回档管理就是这些。git还有许多其他命令。我们之后再说。","categories":[{"name":"知识","slug":"知识","permalink":"http://example.com/categories/%E7%9F%A5%E8%AF%86/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"python进阶","slug":"python进阶","date":"2022-10-29T16:00:00.000Z","updated":"2022-11-02T03:31:05.412Z","comments":true,"path":"2022/10/30/python进阶/","link":"","permalink":"http://example.com/2022/10/30/python%E8%BF%9B%E9%98%B6/","excerpt":"python入门后我开始学习进阶知识 这些是我写的小项目，里面涉及一些知识点，算是实践练习了","text":"python入门后我开始学习进阶知识 这些是我写的小项目，里面涉及一些知识点，算是实践练习了 仅作为参考笔记阅读。 python进阶学习序列应用—猜单词游戏 ——1.随机抽选：random轮子使用猜单词游戏： 123456789101112131415161718192021222324import random #------------random，随机选择模块def guess(): #-------------定义猜单词函数，便于执行 words=(&quot;python&quot;,&quot;juice&quot;,&quot;easy&quot;,&quot;difficult&quot;,&quot;answer&quot;,&quot;continue&quot;,&quot;phone&quot;,&quot;hello&quot;,&quot;pose&quot;,&quot;game&quot;) #------录入单词 newword=&quot;&quot; #-----空字符 word=random.choice(words) #---------随机挑一个单词 recordword=word #—--------保存单词，猜的时候对比 while word: s=random.randrange(len(word)) #-----根据word长度，产生word随机位置 newword+=word[s] #-----s位置的字母组合到乱序后的单词 word=word[:s]+word[(s+1):] #-----原位置字母用切片删除。 print(&quot;乱序后的单词：&quot;,newword) x=str(input(&quot;让你猜：&quot;)) if x==recordword: print(&quot;真棒，你猜对了&quot;) else: print(&quot;可惜，猜错了&quot;)guess() #--------首次执行while True: #--------------进入循环 y=input(&quot;是否继续？(T/N):&quot;) if y==&quot;T&quot; or y==&quot;y&quot;: guess() else: print(&quot;下次再见~&quot;) break","categories":[{"name":"知识","slug":"知识","permalink":"http://example.com/categories/%E7%9F%A5%E8%AF%86/"}],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"}]},{"title":"python","slug":"python之旅","date":"2022-10-14T16:00:00.000Z","updated":"2022-11-10T09:25:14.461Z","comments":true,"path":"2022/10/15/python之旅/","link":"","permalink":"http://example.com/2022/10/15/python%E4%B9%8B%E6%97%85/","excerpt":"我学到的python教程，就当做回忆，和笔记存在了。","text":"我学到的python教程，就当做回忆，和笔记存在了。 如果你也想学，当然可以看看，咱们一起学！~ 如有错误，问题，欢迎qq：1276576156。 python入门学习安装### 解释器 python（也就是说，电脑无法直接理解你的代码，需要编译，解释给电脑，属于是中英翻译官那类的~） —— 1.python官网下载 python 2.点Download-&gt;（黄色按钮）Download Python 3.10.8（这里以后版本会不一样，但基本3开头，就没什么问题） 3.开始下载，【特别注意！】必须点最下面Add python…..不然电脑会无法识别，貌似涉及到环境变量。 4.下载好点击install Now开始安装，安装好的后面可能会有下面的提示，就是Disable……..可以点没，不点应该也没啥。 5.检测：点win+r输入cmd（这个是命令提示符，找计算机的文件位置，在后面安装轮子啥的都要用到，想当程序员，以后也要会很多指令，可以去学学），查找python，如果显示Python （版本号，比如我的3.10.8）。说明安装成功啦！~ ### 编辑器 写代码用的 —— 1.这里我用的是以前安装过的vs code，你可以去找个专门编译的，但我更喜欢vs，因为我需要编译html，css，c语言等其他代码 2.所以你专门做python的话可以去安装个pycharm。或者你什么都不喜欢，甚至可以直接用记事本，或者去找集成开发环境（ide） 3.集成开发环境（我这里是window 10）在开始界面，搜索p，找到IDLE…那个就是了，python自带的,如果经常使用，可以放到桌面上。 4.注意，IDLE是直接进行交互式编程，也就是你写一行就可以立即执行。 看着无聊吗，可以试试听听音乐去，我的博客左下是我的纯音乐歌单，我挺喜欢的，你可以去听听~~，模块需要手动操作，一边看一边学，学累了，就听听歌曲，挺好的 创建项目 ——我的话，是直接在我的git仓库建立xxx.py，然后打开去vs写，没有git仓库，不玩git，直接在桌面，或者文件夹建一个就行。 vs运行 ——vs写好代码，保存，可以直接点右上角的三角开始播放的那个按钮，下面会自动运行的，就不必去cmd打puthon.exe 项目名来运行了。 代码print ——1.print(‘hello world’) #进行打印，输出hello world。特别注意：那个() ‘ 啥的符号都是英文输入法状态的，中文无法识别，会出错。还有就是 ‘’ 和 “” ，这俩是一样的，没啥区别。print(‘hello world’)和print(“hello world”)一样。 ———————- 2.—— 拼接： print()也可以进行拼接,比如print(‘hello’+’world’+’!’) ——&gt; 不给你看输出结果，自己去动手，不然记不住的，蠢蛋！~ ———————- 3.—— +： 如果你觉得紧凑，就在world前加个空格：print(‘hello’+’ world’+’!’) ———————- 4.—— 配对： 虽然 ‘’ 和 “ “ 没区别，但计算机会识别配对，比如print(‘hello “world”‘)，这个就是’’配对，””会被实际打出来，结果为hello “world” ———————- 5.若出现语句需要’和”从而乱套该怎么办，比如” He said “Let’s go””,电脑会识别第二个”，从而报错。可以替换成” He said \\“Let\\‘s go\\“”。 #\\表示转义符，和后面符号一起读，变成个单纯的符号，不进入关键符号。(记得加print~) ———————- 6.——换行： 注意别傻不拉几直接enter换行，要再换行前的语句加入\\n，print(‘hello \\nworld’)自己试试去吧。 ————在这里提到’’’和”””，也就是三引号，这样就可以直接换行 比如 print(“””hello world”””) ———————- 7.—— 相乘，print可以相乘，比如打出100个x print(‘x’*100) 做个题？：：：：试着打出： Let’s dance舞起来~ Cause tonight we’re on fire今夜我们热情似火 Break out释放自我 “Going straight to the top”勇往直前 Let’s dance !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!(30) 答案放在下个题后面~~ （づ￣3￣）づ╭❤～ ——————好力_______print就到这啦，听首歌放松下，喜欢的可以接着看~ Σ( ° △ °|||)︴请要有耐心，把题认真做完巩固一下，再接着看哦 赋值 ——1.直接赋值 : 要赋值的&#x3D;被赋值的 比如 x&#x3D;100 #注意顺序别乱，而且赋好后，print不要带‘’ #赋值那里不要带空格，不要带 _ 以外的符号，不要以数字开头比如 520xraytf，xraytf!, x raytf，还有就是请不要对关键字赋值，比如printf&#x3D;’xraytf’这样就会被视为变量，不会被视为关键字。 ———————- 2.—— 写代码，赋值建议用英文，善用下划线，比如name_student,name_teacher。拼音的话谐音严重，汉语可能有不兼容问题。多打打，建议养成习惯。 赋值被输出可以带逗号，比如定义了x1,x2，print(x1,x2)。 做个题？：：：：试着赋给水果各类的价格并排表打印，苹果，菠萝，香蕉，葡萄。价格自选答案放在下个题后面。︿(￣︶￣)︿ 上个题我的答案： print(‘’’Let&#39;s dance舞起来~ Cause tonight we&#39;re on fire今夜我们热情似火 Break out释放自我 Going straight to the top勇往直前 Let&#39;s dance ‘’’+ ‘!’*30) 计算 ——1.加减乘除 + - * &#x2F; 1+2-3*4&#x2F;5。 #乘方 ** —————– 2.数字有要求的 “3”：浮点数。3：数字。3.0：浮点数。 —————– 3.进行其他运算，比如sin，开根等等，使用的话，需要导入轮子，math。 导入方法：代码(sin)—-其他的你想用啥可以去搜索python math库文档 import math math.sin(1) 做个题？：：：计算-x²-2x+3&#x3D;0用求根公式算出值。 #你说你不会求根公式？自己查去 &#x3D; &#x3D; 答案放在下个题后面o(￣▽￣)ブ 上个题我的答案fruit_apple&#x3D;’35’fruit_pineapple&#x3D;’21’fiuit_banana&#x3D;’999’fruit_grape&#x3D;’233’ print( ‘苹果价格:’+fruit_apple )print( ‘菠萝价格:’+fruit_pineapple )print( ‘香蕉价格:’+fiuit_banana )print( ‘葡萄价格:’+fruit_grape ) #或者:print(‘苹果价格:’+fruit_apple +’\\n菠萝价格:’+fruit_pineapple+ ‘\\n香蕉价格:’+fiuit_banana+’\\n葡萄价格:’+fruit_grape) 注释 # ——注释，解释的东西，注释不会被编译器执行，也就是看代码，别人看不懂，加个解释给人看的，就是不执行的命令。 注释换行：可以选中，点ctrl+&#x2F;就行。或者’’’的换行，这里不加print，所以不会被执行，虽然不是正经注释，但效果一样。 数据类型 —— 1.字符串 str：’233xraytf欧吼’里面的都是字符。想取长度，加一个函数定义len，就是len(‘233xraytf欧吼’) 注意：转义符如\\n是会被判定为一个字符。 想要提取字符，后面加一个[],比如”hello”[3]， #请注意，程序是0优先哈~(牢记，牢记听没听懂！！) ——————————- —— 2.整数型 int: 44,-213 ——————————————— —— 3.浮点数 float：1.2，-233.4 ———————————————– —— 4.布尔类型 bloo：True和False（注意大写） #就真和假 ———————————————— —— 5.空值类型 NOneType：None，当你不知道要写什么的时候可以先定义none，比如赋值，相当于空集 ———————————————– ————6.当你不知道哪个对象类型的时候，可以定义type函数来验证。比如type(“hello”) type(True) type(None) ——做个题？：：：：对”hello world!”求字符串长度，通过索引获得字符串的单个字符w，用字符串长度，获取！。定义布尔类型和空值类型。验证之前定义的所有类型和1.9。答案放在下个题后面~o(*≧▽≦)ツ┏━┓ 上个题我滴答案import matha&#x3D;-1b&#x3D;-2c&#x3D;3q&#x3D;b2-4acx1&#x3D;(-b+math.sqrt(q))&#x2F;(2 a)x2&#x3D;(-b-math.sqrt(q))&#x2F;(2 a)print(x1 ,x2) input —— 1.互动用，大概如input(“输入年龄：”)，你现在会看到里面的，而且可以打进数值。 ———————————- 2.用input被赋值后，不管是什么，都属于字符串，无法进行算数。但是可以用int转换一下，比如x&#x3D;input() int(x)。。其他的类如float转浮点，str转字符都可以 —— 做个题？：：：：求用户的BMI指数（身体质量指数：BMI&#x3D;体重&#x2F;(身高)的平方答案放在下个题后面~ ≡ω≡ ——上个题我的答案：x&#x3D;”hello world!”print(len(x))print(x[6])print(x[len(x)-1]) b1&#x3D;Trueb2&#x3D;False n&#x3D;None print(type(x))print(type(b1))print(type(b2))print(type(1.9))print(type(n)) 条件语句 if —— 1.if 条件：-&gt;判定执行，判定结果会是布尔值，也就是True，False。if后跟的执行语句都是需要缩进的，一般为四个空格，按一个Tab，如果你用编译器，他应该会回车自动缩进的哦~ ————————- 2.条件成立，则执行下方语句，否则跳过。如果你想判定条件为假执行语句，可以后面放一个else： #注意else要不要缩进， 给你个模板： if 3&#x3D;&#x3D;3: —-print(“对”) else: —-print(“错”) ——做个题？：：：：写一个输入星期几能不能去玩的小问答答案放在下个题后面~ (ˉ▽￣～) ——上个题我的答案 w&#x3D;float(input(“请输入你的体重&#x2F;kg:”))h&#x3D;float(input(“请输入你的身高&#x2F;m:”))x&#x3D;w&#x2F;(h)**2print(“您的BMI指数为”,x) 嵌套&#x2F;多条件判断 （galgame常用语句了~） —— 1.if语句是可以嵌套的，就是if语句条件判断成功后在写一句if，当然，else也可以在第二层内部判断为1真2假后执行（注意缩进）。 ——————— 2.多个条件判断也可以用elif，就相当于else的用法，不需要缩进，直接在if后面写，最后还可以写上else。 #这里要注意顺序，如果第一个和第二个elif同时成立，只执行前面的，然后退出判断语句哦。 ——做个题？：：：：丰富一下你的求BMI指数的程序，告诉他属于哪一类x&lt;18.5:偏瘦，18.5x&lt;25:正常。（25&lt;x&lt;30）: 偏胖。x&gt;30:肥胖。答案放在下个题后面哦~ ┑(￣Д ￣)┍ 上个题我的答案： x&#x3D;int(input(“请输入今天是星期几：”))if x&#x3D;&#x3D;7: print(“芜湖！”)else: print(“完。。”) 逻辑运算（优雅~永不过时） ——1.条件太多的话，光用elif，if来写，就会显得不优雅，所以就用到了与，或，非—and，or，not。 ——————— 2.and： 所有条件都为True，才为True。比如3&#x3D;&#x3D;3 and 4&#x3D;&#x3D;5 and 5&#x3D;&#x3D;5是False； ——————— 3.or： 所有条件都为False，才为Flase。#通俗来说就是。and一个错全体错，or一个对全体对o(￣▽￣)ブ —————————— 4.not: 注意，是原先的操作对象是True，然后反过来变成False。比如not 10&#x3D;&#x3D;10,会返回False。 —————– 优雅~太优雅了，但其实还是具体情况具体分析的哈◡‿◡ ——做个题？：：：：比如定义时间，动力，自行车，电动车判断看能外去吃饭，还是在家吃饭，还是都不行呢ヾ(￣▽￣)ByeBye答案放在下个题后面 o(￣▽￣)o 上个题我的答案： w&#x3D;float(input(“请输入你的体重&#x2F;kg:”))h&#x3D;float(input(“请输入你的身高&#x2F;m:”))x&#x3D;w&#x2F;(h)**2print(“您的BMI指数为”,x) if x&lt;&#x3D;18.5: print(“您属于偏瘦范围︿(￣︶￣)︿”)elif x&lt;&#x3D;25: print(“您属于正常范围o(*≧▽≦)ツ”)elif x&lt;&#x3D;30: print(“您属于偏胖范围（＝。＝）”)else: print(“你属于肥胖范围o(≧口≦)o”) 列表，数据整合 —— 1.一个个赋值在多变量时过于麻烦，所以要用到列表。 —————————- 2.形式： x&#x3D;[数据1,数据2]。 可以直接打印，需要看就输出就可以:print(x)。而且列表什么类型都可以放，不需要变来变去的。 ——————————————- 3.往列表里加东西的时候，可以用一个专用词，append。 用法： x.append(数据3)这样就加进去了。 #注意，后面进行操作添加，删除什么的都是直接对列表进行修改，不行要重新定义。比如x&#x3D;x.append(数据3)是不成立的。 ——————————————- 4.删除某个值： x.remove(数据1)。 —————————– 5.len： 返回列表里有几个元素。len(x)。并且可以返回特定顺序的，比如print(x[1])返回数据2.这个也可以直接修改赋值。比如x[1]&#x3D;数据3，那么数据2就被修改为数据3. —————————— 6.内置函数： min(x)—#打印最小值。max(x)—#打印最大值。sorted(x)—#从小到大打印排列好的列表。 ——做个题？：：：：1.试着往列表里加11,22,33。并查看2.添加44并输出3.删除22并输出4.查看列表里现在有几个元素。并且修改11为555.打印最小值，排序列表。 答案放在下个题后面~&lt;(￣︶￣)&gt; 上个题的答案： x&#x3D;int(input(“请输入有没有钱(0&#x2F;1):”))y&#x3D;int(input(“请输入有没有精力(0&#x2F;1):”))z&#x3D;int(input(“请输入有没有自行车(0&#x2F;1):”))l&#x3D;int(input(“请输入有没有电动车(0&#x2F;1):”)) if not y&#x3D;&#x3D;1: print(“什么都不想干 ━(￣ー￣*|||━━”)elif x&#x3D;&#x3D;1 and z&#x3D;&#x3D;1 or l&#x3D;&#x3D;1: print(“可以出去吃饭咯！”)elif z&#x3D;&#x3D;0 and l&#x3D;&#x3D;0: print(“没车，不想出去，在家吃好了&#x3D; &#x3D;”)else: print(“没钱aaaaao(≧口≦)o”) 字典 ——1.由于你用直接赋值太不方便，用列表又不能按名字查。所以用一个字典就可以很好的解决~~~~ —————————— 2.基本： （字典名）contacts&#x3D;{key(键):value(值),key(键):value(值)}。比如contacts&#x3D;{“小明”:”10”,”小红”:”2312”} —————————— 3.查询： contacts[“小明”]。 ————————– 4.元组： 当你想根据年龄找人，而名字一样，由于列表是不可变的，不能放进字典，可以用元组，比如：contacts&#x3D;{(“小明”,23):23123,(“小明”,34):3123123,(“小明”,45):42545234},在找的时候，就能把元组作为键，contacts[(“小明”,34)] —————— 5.添加： contacts[“小亮”]&#x3D;231。注意这是添加，但是如果以前有小亮了，会直接覆盖上去。更新字典。 ——————— 6.看键是不是在字典里，键 in 字典会返回布尔值，如：”小明” in contacts 会返回True ——————– 7.删除： del contacts[“小明”] ————————- 8.查询多少个键值对：len(contacts)。 ——————————- 其他用法：当()什么都没有时就会全部输出。比如x.keys()：输出所有键，x.values()：所有值，x.items()：所有键值对 ——做个题？：：：：写3人份的姓名，学号，手机号通讯录并做到各个功能答案放在下个题后面~(￣▽￣)～■干杯□～(￣▽￣) 上个题答案： x&#x3D;[11,22,33]print(x)x.append(44)print(x)x.remove(22)print(x)print(len(x))x[0]&#x3D;55print(x)print(min(x))print(sorted(x)) for循环 —— 1.基本样式为for x in 列表:，也就是比如： list&#x3D;[1,2,3,4,5],—for x in list就表示为从第一个开始赋值到最后,去试试print吧，for和if他们一样，也是需要缩进，无缩进退出for的编辑。 ——————- 2.和字典混用。因为你如果想找目标，还是需要和字典结合。 比如x&#x3D;{“job”:34,”jone”:54,”jerry”:98} for name,socre in x.items(): if socre&gt;35: print(“name”) 或者———– for t in x.items(): —-name&#x3D;t[0] —-socre&#x3D;t[1] —-if socre&gt;35: —-print(“name”) ———————- 3.在此介绍一个常用绑定函数range： range是可以依次进入的，比如range(1,101)就是进入1-100（所以说不包括最后一个），形式：for x in range(1,100):这样~—–range函数还可以添加第三个，range(1,101,2)就是跳俩，1,3,5,7…….。不写默认为1。 ——做个题？：：：：求521到1314的和。答案放在下个题后面 φ(゜▽゜*)♪ 上个题答案： t&#x3D;{(“a”,12):123121,(“b”,34):434324,(“c”,45):5645764645}print(t)x&#x3D;input(“请输入要查询的人和学号”)if x in t: print(t[x])else: print(“没有”)print(“添加键”) t[(“小白”,87)]&#x3D;423432print(t)print(“查看键是否在词典内”)y&#x3D;input(“请输入要查询的人和学号，判断是否在内”)print(y in t)print(“删除b”)del t[(“b”,34)]print(t)print(“查询有多少个键值对”)print(len(t)) while循环 —— 1.适用于不知道具体多少循环次数，比如计算器。 ———— 2.基本形式： while 条件： ****行动 例如: while x&gt;0: ****print(“x”) ————————– 3.注意一点，切记不能进入死循环，比如： i&#x3D;0 while i&lt;len(x): ****print(x[i]) ****i+&#x3D;1————–这里这个不写，i就会一直小于len（x）这样循环就会一直持续下去。这也是while最需要注意的。 —— 做个题？：：：：做一个求平均值的计算器答案放在下个题后面~ヾ(≧∇≦*)ゝ 上个题我的答案：sum&#x3D;0for i in range(521,1315): sum+&#x3D;iprint(sum) 函数 —— 1.当你需要定义多个算法，比如计算一个圆，扇形的面积，每次都写公式，未免太麻烦。而编码原则也是，尽量不要去重复你写的东西，所以，函数就显得 非常好用。直接输入值，输入一行执行函数的代码，自动帮你执行那个功能，听起来就很香吧 —————— 2.形式： 写函数：def 函数头（参数1，参数2）：#记得缩进。 调用函数：函数头（参数1，参数2）：参数对应。就比如说你输入函数头(半径，角度)会自动对应里面的，并且可以在函数内使用。 ——————— 3.作用域： 输出怎么输出，你可以在函数内获得你所赋的值，但出了函数，就不可以了，也就是内外的关系。 这里就用带了return 值。写在函数末尾。这个会帮助你在执行函数语句后，返回return的值就可以直接用这个函数了 ——做个题？：：：：用函数完善你的BMI计算器答案放在下个题的后面~（゜▽＾*）） 上个题我的答案： num&#x3D;0p&#x3D;0j&#x3D;0x&#x3D;input(“请输入数字(stop结束):”)while x !&#x3D;”stop”: num+&#x3D;float(x) j+&#x3D;1 x&#x3D;input(“请输入数字(stop结束):”) if j&#x3D;&#x3D;0: p&#x3D;0else: #这里是因为如果一开始就输入stop，0&#x2F;0不被允许会报错。 p&#x3D;num&#x2F;j print(p) 模块 —— 1.sum求和什么的都是内置模块，比较常用，所以python都会自带，而不常用的外置函数，就需要引入，或者自己写。 ——————- 2.引入模块： import 模块名 #可以导入所有模块，但并不推荐，所以知道能就行了。 ———————– 3.使用模块： 模块.函数，比如 import turtle –#导入海龟画图的模块 turtle.forward(100) —#前进100个像素 turtle.left(90) —-#箭头左转90度 turtle.forward(100) ——#前进100个像素。 画了个直角。 其他用法： turtle.pensize(像素)—#粗细线条 turtle.pencolor(“颜色”)—#加画笔颜色 turtle.circle(半径)—#画圆 turtle.penup()—#拿起笔，就是先不画 turtle.pendown()—-#放下笔，开始画 turtle.fillcolor(“颜色”)—–#默认填充白色，这个可以换成其他颜色。 -----光有填充是不行的，也需要开始和结束填充： turtle.begin_fill()---#开始填充 turtle.end_fill()----#结束填充 turtle.hideturtle()------#隐藏海龟箭头图标。 ------------------其他的自行去找吧~ ——做个题？：：：：画一个你喜欢的图形 上个题的我的答案： w&#x3D;float(input(“请输入你的体重&#x2F;kg:”))h&#x3D;float(input(“请输入你的身高&#x2F;m:”)) def BMI(w,h): x&#x3D;w&#x2F;(h)**2 print(“您的BMI指数为:”,x) if x&lt;&#x3D;18.5: print(“您属于偏瘦范围︿(￣︶￣)︿”) elif x&lt;&#x3D;25: print(“您属于正常范围o(*≧▽≦)ツ”) elif x&lt;&#x3D;30: print(“您属于偏胖范围（＝。＝）”) else: print(“你属于肥胖范围o(≧口≦)o”) return x while w !&#x3D; ‘0’: BMI(w,h) w&#x3D;float(input(“请输入你的体重&#x2F;kg:”)) h&#x3D;float(input(“请输入你的身高&#x2F;m:”)) ——我这里用海龟画图模块写一个，你可以先照着代码猜猜是什么，再去试试看。 import turtlefrom unittest import runnerturtle.pencolor(“red”)turtle.pensize(10)turtle.circle(105) turtle.left(90)turtle.penup()turtle.forward(50)turtle.right(90)turtle.pendown() turtle.fillcolor(“blue”)turtle.begin_fill()turtle.circle(55)turtle.end_fill()turtle.pensize(1) turtle.penup()turtle.left(90)turtle.forward(70)turtle.left(90)turtle.forward(48)turtle.right(180)turtle.pendown() turtle.fillcolor(“white”)turtle.pencolor(“white”)turtle.begin_fill()i&#x3D;0while i&lt;5: turtle.forward(100) turtle.right(144) i+&#x3D;1turtle.end_fill()turtle.hideturtle() turtle.exitonclick() —–到这里，基础知识大概就没什么了。其他的去找找资料，实践写东西去吧~ヽ(✿ﾟ▽ﾟ)ノ","categories":[{"name":"知识","slug":"知识","permalink":"http://example.com/categories/%E7%9F%A5%E8%AF%86/"}],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"}]},{"title":"我的网上冲浪","slug":"我的第一篇文章","date":"2022-10-12T16:00:00.000Z","updated":"2022-11-02T03:31:06.724Z","comments":true,"path":"2022/10/13/我的第一篇文章/","link":"","permalink":"http://example.com/2022/10/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/","excerpt":"在此，记录我网上的青春。","text":"在此，记录我网上的青春。 探索着探索着，我喜欢在网上当一个探索者，每次有新发现都会让我无比激动。 这次的博客，是一个全新的尝试，我正式去接触github，开启全面接触各业。 以下，是一个总想着探索的笨比的碰壁之旅….感兴趣的可以瞅两眼（可以当个小故事看，毕竟我是个话痨，会写的很多） 记忆回顾 小学 —— 基于我家有一个windows系统的老式笔记本电脑，我开始在互联网上流浪，正式接触互联网 起初，我尝试自己打开电脑这个东西，从会发光的小破盒子，发展成下载qq，开启qq空间（玩qq农场啥的破游戏），还不到3天，可以说对我的吸引力可见一般。 —— 后来，我尝试在qq上去寻找各式各样的人，探索qq的各个功能，学习一些小知识，比如认识到跳转这个功能，和网页（但是当时太笨，连一些词语都不懂，所以学的很有限） —— 最后，我开始向地址发展，在原式360浏览器中摸索（因为每次点qq空间都会跳到360）我开始学习网址，尝试自己照着他们的共同点（基本结构http啥的）找出其他网站，比如qq音乐的数字，但也仅此而已了。毕竟我家也不是富裕人家，都玩不好电脑（甚至我是家里玩的最好的）。 初中 —— 起初，我开始去探索360浏览器的各个网址，就是有着4399的一堆网站，想去看看都能干什么，但其实什么也没干，净碰壁了，有时候有个喜欢的就收藏起 来， 但其实也很少看，大部分都是垃圾网站，于是。。很长一段时间，我放弃了搜找，因为只有4399一个网站我喜欢（游戏嘛）。 —— 后来，我认识到了下载这个事，开始尝试各式各样的下载，但电脑貌似经不起我这样的折腾，变得越来越卡，具体情况就是，我想美化，或者想用一些网上说的小功能，而且我想试试看各个软件好不好用，就比如探索比360更好的浏览器，和电脑内部磁盘怎么占用，安装地址什么的。终于是。。把电脑玩崩了。。&#x3D; &#x3D;。。。。。 （于是电脑体验正式进入休眠期）—— 可能是当时我还是不太懂，比如下载完，不知道卸载这个事，只知道删除，于是删除了快捷方式（蠢b）。 —— 还有大概就是，我下的软件，比较。。。奇怪，比如2345，当时是有默认浏览器一说，我确实也设置了，（但删除的是快捷键就是了）于是开始探索怎么回事，但终究是没搞明白，后来我发现电脑的问题时，希望采取补救措施，于是就有了鲁大师，各式杀毒软件，但不懂什么事硬件，什么是电脑病毒，只是感觉他们是清理的，可能会让电脑好一点。然后更一天不如一天。——_—— (大概初二正式弃用) 初三后到高三 —— 在此之后，我就准备去祸害手机（） —— 当然最开始的确实还是游戏，但没什么爱玩的，就去探索别的app，逐渐接触配音，演戏，直播，视频网站，音乐等等，当然，我自己也实践过（比如自己配音，对比专业配音，pia戏，找剧本，自我音乐创作，做视频等） 其中 —— 做视频：其实也就是录像，当时只有手机，用不好剪辑工具，所以我就放弃了，打算去大一买电脑了试试。 —— 音乐创作：我当时很热爱音乐，在网上甚至音乐app没有就去网上找（甚至我只有小盒子按键手机，在电视上听到喜欢的音乐，就启用录音录下来听，比如马上又的谁，还有一些动画的op，ed），后来吧，我爸看我很喜欢音乐，于是说要不要买点音乐设备，就小提琴，吉他啥的，我当时也蛮喜欢的，就答应下来的，买一个吉他，但并不好买，他也一直上班，所以一直在拖，我看了一些关于乐器的书，在网上也找了些资料（但，迫于时间，学习压力，最终还是作废了）。 —— 在这之间。我在留下来的学习机，和步步高点读机上探索，但功能实在太少，学习机倒是很不错，我学习了图书里的人文，历史，语文等等知识，也体验了里面自带的力学，电气实验室，但其实没有联网，没有其他设备能与其连接，所以能用的功能也实在太少，所以也是没学到什么有用的。 —— 在高一下半年，我接触了代码，开始在高层面冲浪~，我了解到学校有一个学习c语言，于是我就开始去试着参与进去，向老师报告我想学。后来也是成功混进去了，但迫于是后知道的，所以基础知识他们已经学完，不可能因为我重头开始，所以就处于零基础开始写一些基本问题的地步，当然，肯定是跟不上，听不懂，还不会，为此我也借了一个走了的他班的书来学习，后面多多少少好歹是跟上点了。但当然还是不如其他人学得好，因为他们本身是尖子生，全校前几才有这个信息，从他们那里招的，我只是兴趣使然，而且是中途插入，基础更差，因此在后面一次说是出去竞赛后，这个班就停止继续学习了，我也结束了我的大学代码学习。 —— 再后来，就没什么活动了，因为，没有电脑，玩手机的时间也很少，我只是去尝试，体验各个app，并不能用手机干什么，所以也就一直致力于摆烂，游戏，和学习了。 大一 —— 我再次开启我的电脑之旅，一边学习课程的c语言，一边开启学习视频制作，接触pr，ae等东西，学了一些社团里的课程资源，在b站找些视频看，正式开启剪辑之旅。 —— 后来，正式在b站注册账号发布视频，主要是音乐混剪（虽然中途因为疫情回家了，所以下半年在家摆烂不想做后来没发了。） 由于我在高中学习过c语言，所以学习起来方便不少，但老师讲的很差，我也就自学了一段时间，把高中不懂的一些，比如结构体，指针等完善了一下，后来下半年接触数据结构，在家上网课，效率比较低，但姑且是能做出来，在后面的大作业中写了（用单链表设计电影院售票管理系统）（拓展题目：航空售票处的服务系统）。起码是。。能看吧，还可以，算是合格了 —— 至于网页设计，我其实个人认为学习的并不多，其实记住的也就是一些指令，还有涉及html，css的相关知识，课程大作业我随便在b站找了一个模板，然后开始修改，还算蛮简单的，没用多久就完成交上去了。 大二 —— 从大人（我的高三同桌，互联网知识面很广）口中得知设计博客，软考等方面的知识，既能提高自己，还能写到简历，于是正式开始接触博客，从博客制作过程中了解到了github，并初步了解web前端知识等，虽然可能学的不多，但起码都接触了，好歹是有个了解。 —— 通过github和hexo成功设计好了这个博客，并且接触到了github，也是~很兴奋哈，啊哈哈哈哈！ —— 在博客的过程中也碰了不少壁，但还好，通过在csdn上找，和问千千（我在制作博客中遇到的朋友，代码知识丰富，很早接触github，设计程序，比我小一届，我的第一个友链）和大人还有去群里找大佬帮忙。总算是有惊无险弄完了（具体过程我就不说了，大概的过程想知道可以去看看足迹）很辛苦，但也很充实，做完后完善（满满的成就感） —— 在这后我也会正式去github上浪，看项目，写代码，争取学好c,python，前端知识等,也设计插件啥的,嘿嘿，想想又兴奋起来了。","categories":[{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"记忆","slug":"记忆","permalink":"http://example.com/tags/%E8%AE%B0%E5%BF%86/"},{"name":"脚步","slug":"脚步","permalink":"http://example.com/tags/%E8%84%9A%E6%AD%A5/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-10-09T11:21:23.208Z","updated":"2022-10-09T11:21:23.208Z","comments":true,"path":"2022/10/09/hello-world/","link":"","permalink":"http://example.com/2022/10/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"知识","slug":"知识","permalink":"http://example.com/categories/%E7%9F%A5%E8%AF%86/"},{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"记忆","slug":"记忆","permalink":"http://example.com/tags/%E8%AE%B0%E5%BF%86/"},{"name":"脚步","slug":"脚步","permalink":"http://example.com/tags/%E8%84%9A%E6%AD%A5/"}]}